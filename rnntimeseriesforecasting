import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load historical stock data (e.g., Apple Inc. - AAPL)
ticker = 'AAPL'
data = yf.download(ticker, start='2010-01-01', end='2023-01-01')['Adj Close']

# Normalize data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data.values.reshape(-1, 1))

# Prepare training data
train_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:train_size]

def create_sequences(data, seq_length):
    sequences = []
    for i in range(len(data) - seq_length):
        seq = data[i:i + seq_length]
        sequences.append(seq)
    return np.array(sequences)

seq_length = 10
X_train = create_sequences(train_data, seq_length)
y_train = train_data[seq_length:]

# Build LSTM model
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(seq_length, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=32)

# Predict stock prices
test_data = scaled_data[train_size - seq_length:]
X_test = create_sequences(test_data, seq_length)
predicted_prices = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted_prices)

# Plot actual vs. predicted prices
plt.figure(figsize=(12, 6))
plt.plot(data.index[train_size:], data[train_size:], label='Actual Prices')
plt.plot(data.index[train_size:], predicted_prices, label='Predicted Prices', linestyle='--')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title(f'{ticker} Stock Price Prediction')
plt.legend()
plt.show()
